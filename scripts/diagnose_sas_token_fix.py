#!/usr/bin/env python3
"""
Script de diagn√≥stico para verificar que la correcci√≥n del error de SAS token est√° funcionando.
"""

import sys
import os
import logging
from datetime import datetime

# Configurar logging
logging.basicConfig(level=logging.INFO, format='%(levelname)s:%(name)s:%(message)s')
logger = logging.getLogger(__name__)

def diagnose_sas_token_fix():
    """Diagnostica si la correcci√≥n del error de SAS token est√° funcionando."""
    logger.info("üîç DIAGN√ìSTICO DE CORRECCI√ìN DE SAS TOKEN")
    logger.info(f"üìÖ Fecha: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    logger.info("")
    
    print("=" * 60)
    print("  VERIFICACI√ìN DE C√ìDIGO CORREGIDO")
    print("=" * 60)
    
    # Verificar que el c√≥digo corregido est√° en el archivo
    try:
        with open('../services/storage_service.py', 'r', encoding='utf-8') as f:
            content = f.read()
            
        # Verificar que se elimin√≥ el uso problem√°tico de generate_sas
        if 'blob_client.generate_sas(' in content:
            logger.error("‚ùå C√≥digo problem√°tico encontrado: blob_client.generate_sas(")
            return False
        else:
            logger.info("‚úÖ C√≥digo problem√°tico eliminado: blob_client.generate_sas(")
            
        # Verificar que se implement√≥ la soluci√≥n correcta
        if 'generate_blob_sas(' in content:
            logger.info("‚úÖ C√≥digo corregido encontrado: generate_blob_sas(")
        else:
            logger.error("‚ùå C√≥digo corregido no encontrado: generate_blob_sas(")
            return False
            
        # Verificar que se importa BlobSasPermissions
        if 'BlobSasPermissions' in content:
            logger.info("‚úÖ C√≥digo corregido encontrado: BlobSasPermissions")
        else:
            logger.error("‚ùå C√≥digo corregido no encontrado: BlobSasPermissions")
            return False
            
    except Exception as e:
        logger.error(f"‚ùå Error verificando c√≥digo: {e}")
        return False
    
    print("")
    print("=" * 60)
    print("  VERIFICACI√ìN DE IMPORTACIONES")
    print("=" * 60)
    
    # Verificar importaciones
    try:
        sys.path.insert(0, os.path.join(os.path.dirname(__file__), '..'))
        from azure.storage.blob import generate_blob_sas, BlobSasPermissions
        from services.storage_service import AzureStorageService
        
        logger.info("‚úÖ generate_blob_sas importado correctamente")
        logger.info("‚úÖ BlobSasPermissions importado correctamente")
        logger.info("‚úÖ AzureStorageService importado correctamente")
        
    except ImportError as e:
        logger.error(f"‚ùå Error de importaci√≥n: {e}")
        return False
    
    print("")
    print("=" * 60)
    print("  VERIFICACI√ìN DE FUNCIONALIDAD")
    print("=" * 60)
    
    # Verificar que el servicio se puede inicializar
    try:
        service = AzureStorageService()
        logger.info("‚úÖ Servicio de almacenamiento inicializado")
        
        # Verificar que el m√©todo get_blob_url existe
        if hasattr(service, 'get_blob_url'):
            logger.info("‚úÖ M√©todo get_blob_url disponible")
        else:
            logger.error("‚ùå M√©todo get_blob_url no disponible")
            return False
            
    except Exception as e:
        logger.error(f"‚ùå Error inicializando servicio: {e}")
        return False
    
    print("")
    print("=" * 60)
    print("  VERIFICACI√ìN DE COMPATIBILIDAD")
    print("=" * 60)
    
    # Verificar compatibilidad con Azure Storage SDK
    try:
        # Verificar que generate_blob_sas es callable
        if callable(generate_blob_sas):
            logger.info("‚úÖ generate_blob_sas es callable")
        else:
            logger.error("‚ùå generate_blob_sas no es callable")
            return False
            
        # Verificar que BlobSasPermissions funciona
        try:
            permissions = BlobSasPermissions(read=True)
            logger.info("‚úÖ BlobSasPermissions.read funciona correctamente")
        except Exception as e:
            logger.error(f"‚ùå BlobSasPermissions.read fall√≥: {e}")
            return False
            
    except Exception as e:
        logger.error(f"‚ùå Error verificando compatibilidad: {e}")
        return False
    
    print("")
    print("=" * 60)
    print("  RESUMEN DE DIAGN√ìSTICO")
    print("=" * 60)
    
    logger.info("‚úÖ C√≥digo problem√°tico eliminado")
    logger.info("‚úÖ C√≥digo corregido implementado")
    logger.info("‚úÖ Importaciones funcionando")
    logger.info("‚úÖ Servicio inicializable")
    logger.info("‚úÖ Compatibilidad verificada")
    logger.info("")
    logger.info("üéâ La correcci√≥n del error de SAS token est√° funcionando correctamente")
    logger.info("üìù El error 'BlobClient object has no attribute generate_sas' ha sido resuelto")
    
    return True

if __name__ == "__main__":
    success = diagnose_sas_token_fix()
    sys.exit(0 if success else 1)
