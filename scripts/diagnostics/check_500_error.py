#!/usr/bin/env python3
"""
Script de diagn√≥stico r√°pido para error 500
Verifica configuraci√≥n, dependencias y posibles causas
"""

import os
import sys
import django
from pathlib import Path

# Agregar el directorio ra√≠z al path
BASE_DIR = Path(__file__).resolve().parent.parent.parent
sys.path.insert(0, str(BASE_DIR))

def check_django_version():
    """Verificar versi√≥n de Django y compatibilidad"""
    print("=== VERIFICACI√ìN DE DJANGO ===")
    print(f"Django version: {django.get_version()}")
    
    # Verificar si es compatible
    django_version = django.VERSION
    if django_version[0] == 5 and django_version[1] == 0:
        print("‚úÖ Django 5.0.x detectado - compatible")
    elif django_version[0] == 5 and django_version[1] == 2:
        print("‚ö†Ô∏è  Django 5.2.x detectado - puede causar problemas")
    else:
        print(f"‚ùå Versi√≥n inesperada: {django_version}")
    
    return True

def check_settings():
    """Verificar configuraci√≥n de Django"""
    print("\n=== VERIFICACI√ìN DE CONFIGURACI√ìN ===")
    
    # Configurar Django
    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'config.settings.azure_production')
    
    try:
        django.setup()
        print("‚úÖ Django configurado correctamente")
        
        # Verificar configuraci√≥n cr√≠tica
        from django.conf import settings
        
        print(f"DEBUG: {settings.DEBUG}")
        print(f"ALLOWED_HOSTS: {settings.ALLOWED_HOSTS}")
        print(f"DATABASES: {settings.DATABASES['default']['ENGINE']}")
        
        # Verificar variables cr√≠ticas
        critical_vars = [
            'AZURE_POSTGRESQL_NAME',
            'AZURE_POSTGRESQL_USERNAME', 
            'AZURE_POSTGRESQL_PASSWORD',
            'AZURE_POSTGRESQL_HOST'
        ]
        
        for var in critical_vars:
            value = os.environ.get(var)
            if value:
                print(f"‚úÖ {var}: {'*' * len(value)}")
            else:
                print(f"‚ùå {var}: NO CONFIGURADA")
                
        return True
        
    except Exception as e:
        print(f"‚ùå Error configurando Django: {e}")
        return False

def check_imports():
    """Verificar imports cr√≠ticos"""
    print("\n=== VERIFICACI√ìN DE IMPORTS ===")
    
    try:
        from apps.core.models import CustomUser
        print("‚úÖ CustomUser importado correctamente")
    except Exception as e:
        print(f"‚ùå Error importando CustomUser: {e}")
    
    try:
        from apps.documents.models import Document
        print("‚úÖ Document importado correctamente")
    except Exception as e:
        print(f"‚ùå Error importando Document: {e}")
    
    try:
        from services.storage_service import AzureStorageService
        print("‚úÖ AzureStorageService importado correctamente")
    except Exception as e:
        print(f"‚ùå Error importando AzureStorageService: {e}")
    
    return True

def check_migrations():
    """Verificar estado de migraciones"""
    print("\n=== VERIFICACI√ìN DE MIGRACIONES ===")
    
    try:
        from django.core.management import execute_from_command_line
        from django.db import connection
        
        # Verificar conexi√≥n a BD
        with connection.cursor() as cursor:
            cursor.execute("SELECT version();")
            version = cursor.fetchone()
            print(f"‚úÖ Conexi√≥n a BD: {version[0]}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Error verificando migraciones: {e}")
        return False

def main():
    """Funci√≥n principal"""
    print("üîç DIAGN√ìSTICO DE ERROR 500")
    print("=" * 50)
    
    checks = [
        check_django_version,
        check_settings,
        check_imports,
        check_migrations
    ]
    
    results = []
    for check in checks:
        try:
            result = check()
            results.append(result)
        except Exception as e:
            print(f"‚ùå Error en check: {e}")
            results.append(False)
    
    print("\n" + "=" * 50)
    print("üìä RESUMEN")
    
    if all(results):
        print("‚úÖ Todos los checks pasaron - el problema puede ser temporal")
        print("üí° Sugerencias:")
        print("   - Revisar logs de Azure App Service")
        print("   - Verificar si hay problemas de red")
        print("   - Comprobar si el servicio est√° sobrecargado")
    else:
        print("‚ùå Se encontraron problemas de configuraci√≥n")
        print("üí° Acciones recomendadas:")
        print("   - Revisar variables de entorno en Azure")
        print("   - Verificar configuraci√≥n de base de datos")
        print("   - Comprobar compatibilidad de versiones")

if __name__ == "__main__":
    main()
