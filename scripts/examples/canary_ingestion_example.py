"""
Ejemplo de Uso del Canary de Ingesta - VEA Connect

Este script demuestra c√≥mo usar el canary de ingesta para procesar documentos
sin afectar el pipeline de producci√≥n.
"""

import os
import sys
import tempfile
import shutil
from pathlib import Path

# Agregar el directorio ra√≠z al path para imports
sys.path.insert(0, str(Path(__file__).parent.parent.parent))

def create_test_documents():
    """Crear documentos de prueba para el canary."""
    test_dir = Path("test_canary_documents")
    test_dir.mkdir(exist_ok=True)
    
    # Crear archivo de texto simulado
    text_content = """
    Documento de Prueba - Donaciones Ministeriales
    
    Este documento describe los procesos de donaciones para ministerios gubernamentales.
    Incluye informaci√≥n sobre requisitos, procedimientos y contactos necesarios.
    
    Requisitos para Donaciones:
    1. Formulario de solicitud completo
    2. Documentaci√≥n de identidad
    3. Justificaci√≥n del proyecto
    4. Presupuesto detallado
    
    Contactos:
    - Email: donaciones@ministerio.gob.pe
    - Tel√©fono: (01) 123-4567
    - Horario: Lunes a Viernes 8:00 - 17:00
    
    Proceso de Aprobaci√≥n:
    1. Revisi√≥n inicial (5 d√≠as h√°biles)
    2. Evaluaci√≥n t√©cnica (10 d√≠as h√°biles)
    3. Aprobaci√≥n final (3 d√≠as h√°biles)
    4. Notificaci√≥n al solicitante
    
    Este proceso asegura que las donaciones se manejen de manera transparente
    y eficiente, beneficiando a la comunidad en general.
    """
    
    # Crear archivo de texto
    text_file = test_dir / "documento_prueba.txt"
    with open(text_file, 'w', encoding='utf-8') as f:
        f.write(text_content)
    
    # Crear archivo PDF simulado (contenido de texto)
    pdf_content = """
    Gu√≠a de Eventos Comunitarios
    
    Esta gu√≠a proporciona informaci√≥n completa para la organizaci√≥n
    de eventos comunitarios exitosos.
    
    Planificaci√≥n del Evento:
    - Definir objetivos y p√∫blico objetivo
    - Establecer presupuesto
    - Seleccionar fecha y ubicaci√≥n
    - Coordinar con autoridades locales
    
    Checklist de Organizaci√≥n:
    ‚ñ° Permisos y licencias
    ‚ñ° Seguridad y primeros auxilios
    ‚ñ° Log√≠stica y equipamiento
    ‚ñ° Comunicaci√≥n y marketing
    ‚ñ° Voluntarios y personal
    
    Presupuesto Estimado:
    - Alquiler de espacio: $500
    - Equipamiento: $300
    - Marketing: $200
    - Seguridad: $150
    - Contingencia: $100
    Total: $1,250
    
    Mejores Pr√°cticas:
    1. Comenzar la planificaci√≥n con anticipaci√≥n
    2. Involucrar a la comunidad desde el inicio
    3. Mantener comunicaci√≥n clara y frecuente
    4. Tener planes de contingencia
    5. Evaluar y documentar lecciones aprendidas
    """
    
    # Crear archivo PDF simulado
    pdf_file = test_dir / "guia_eventos.pdf"
    with open(pdf_file, 'w', encoding='utf-8') as f:
        f.write(pdf_content)
    
    # Crear archivo de imagen simulado
    image_content = """
    Manual de Contactos de Emergencia
    
    Lista completa de contactos de emergencia para diferentes situaciones.
    
    Emergencias M√©dicas:
    - Ambulancia: 116
    - Cruz Roja: (01) 265-8787
    - Hospital m√°s cercano: (01) 234-5678
    
    Emergencias de Seguridad:
    - Polic√≠a: 105
    - Bomberos: 116
    - Defensa Civil: 119
    
    Emergencias El√©ctricas:
    - Compa√±√≠a el√©ctrica: (01) 345-6789
    - Servicio t√©cnico: (01) 456-7890
    
    Protocolos de Emergencia:
    1. Mantener la calma
    2. Evaluar la situaci√≥n
    3. Llamar al n√∫mero correspondiente
    4. Proporcionar informaci√≥n clara
    5. Seguir instrucciones del operador
    
    Informaci√≥n a Proporcionar:
    - Tipo de emergencia
    - Ubicaci√≥n exacta
    - N√∫mero de personas afectadas
    - Condiciones actuales
    - Nombre y tel√©fono del reportante
    """
    
    # Crear archivo de imagen simulado
    image_file = test_dir / "contactos_emergencia.jpg"
    with open(image_file, 'w', encoding='utf-8') as f:
        f.write(image_content)
    
    print(f"‚úÖ Documentos de prueba creados en: {test_dir}")
    print(f"   - {text_file.name}")
    print(f"   - {pdf_file.name}")
    print(f"   - {image_file.name}")
    
    return test_dir

def run_canary_ingestion(test_dir):
    """Ejecutar el canary de ingesta."""
    print("\nüöÄ Ejecutando Canary de Ingesta")
    print("=" * 50)
    
    # Verificar si el canary est√° habilitado
    if not os.getenv('CANARY_INGEST_ENABLED'):
        print("‚ö†Ô∏è Canary no est√° habilitado. Configurando...")
        os.environ['CANARY_INGEST_ENABLED'] = 'True'
    
    # Ejecutar comando de ingesta
    import subprocess
    
    cmd = [
        'python', 'manage.py', 'ingest_canary',
        '--path', str(test_dir),
        '--chunk-size', '800',
        '--overlap', '150',
        '--output-format', 'summary',
        '--verbose'
    ]
    
    try:
        result = subprocess.run(cmd, capture_output=True, text=True, cwd='.')
        print("üìã Salida del Canary:")
        print(result.stdout)
        
        if result.stderr:
            print("‚ö†Ô∏è Errores:")
            print(result.stderr)
            
    except Exception as e:
        print(f"‚ùå Error ejecutando canary: {e}")

def run_hybrid_search_canary():
    """Ejecutar el canary de b√∫squeda h√≠brida."""
    print("\nüîç Ejecutando Canary de B√∫squeda H√≠brida")
    print("=" * 50)
    
    # Ejecutar script de b√∫squeda h√≠brida
    import subprocess
    
    cmd = ['python', 'scripts/search/hybrid_canary.py']
    
    try:
        result = subprocess.run(cmd, capture_output=True, text=True, cwd='.')
        print("üìã Salida del Canary de B√∫squeda:")
        print(result.stdout)
        
        if result.stderr:
            print("‚ö†Ô∏è Errores:")
            print(result.stderr)
            
    except Exception as e:
        print(f"‚ùå Error ejecutando canary de b√∫squeda: {e}")

def cleanup_test_documents(test_dir):
    """Limpiar documentos de prueba."""
    try:
        shutil.rmtree(test_dir)
        print(f"\nüßπ Documentos de prueba eliminados: {test_dir}")
    except Exception as e:
        print(f"‚ö†Ô∏è Error eliminando documentos de prueba: {e}")

def main():
    """Funci√≥n principal del ejemplo."""
    print("üß™ Ejemplo de Canary de Ingesta y B√∫squeda H√≠brida")
    print("=" * 60)
    
    # Crear documentos de prueba
    test_dir = create_test_documents()
    
    try:
        # Ejecutar canary de ingesta
        run_canary_ingestion(test_dir)
        
        # Ejecutar canary de b√∫squeda h√≠brida
        run_hybrid_search_canary()
        
    finally:
        # Limpiar documentos de prueba
        cleanup_test_documents(test_dir)
    
    print("\n‚úÖ Ejemplo completado")
    print("\nüí° Para usar con documentos reales:")
    print("   1. Configurar variables de entorno")
    print("   2. Crear carpeta con documentos reales")
    print("   3. Ejecutar: python manage.py ingest_canary --path /ruta/documentos")
    print("   4. Ejecutar: python scripts/search/hybrid_canary.py")

if __name__ == "__main__":
    main()

