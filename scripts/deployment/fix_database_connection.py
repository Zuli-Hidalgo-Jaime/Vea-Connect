#!/usr/bin/env python3
"""
Script para diagnosticar y corregir problemas de conexi√≥n a la base de datos PostgreSQL en Azure
"""

import os
import sys
import psycopg2
from psycopg2 import OperationalError
import urllib.parse
from pathlib import Path

def print_header(title):
    """Imprimir un encabezado formateado."""
    print(f"\n{'='*60}")
    print(f"üîç {title}")
    print(f"{'='*60}")

def print_section(title):
    """Imprimir una secci√≥n formateada."""
    print(f"\nüìã {title}")
    print(f"{'-'*40}")

def check_environment_variables():
    """Verificar las variables de entorno de la base de datos."""
    print_section("VERIFICACI√ìN DE VARIABLES DE ENTORNO")
    
    # Variables requeridas
    variables = {
        'AZURE_POSTGRESQL_HOST': os.environ.get('AZURE_POSTGRESQL_HOST'),
        'AZURE_POSTGRESQL_NAME': os.environ.get('AZURE_POSTGRESQL_NAME'),
        'AZURE_POSTGRESQL_USERNAME': os.environ.get('AZURE_POSTGRESQL_USERNAME'),
        'AZURE_POSTGRESQL_PASSWORD': os.environ.get('AZURE_POSTGRESQL_PASSWORD'),
        'DATABASE_URL': os.environ.get('DATABASE_URL'),
    }
    
    all_present = True
    for var_name, var_value in variables.items():
        if var_value:
            if 'PASSWORD' in var_name:
                print(f"‚úÖ {var_name}: {'*' * len(var_value)}")
            else:
                print(f"‚úÖ {var_name}: {var_value}")
        else:
            print(f"‚ùå {var_name}: NO CONFIGURADA")
            all_present = False
    
    return all_present, variables

def analyze_database_url(database_url):
    """Analizar la URL de la base de datos para detectar problemas."""
    print_section("AN√ÅLISIS DE DATABASE_URL")
    
    if not database_url:
        print("‚ùå DATABASE_URL no est√° configurada")
        return False
    
    try:
        # Parsear la URL
        parsed = urllib.parse.urlparse(database_url)
        
        print(f"Protocolo: {parsed.scheme}")
        print(f"Usuario: {parsed.username}")
        print(f"Host: {parsed.hostname}")
        print(f"Puerto: {parsed.port}")
        print(f"Base de datos: {parsed.path[1:] if parsed.path else 'None'}")
        print(f"Par√°metros: {parsed.query}")
        
        # Verificar problemas comunes
        issues = []
        
        if not parsed.username:
            issues.append("‚ùå Usuario no especificado en la URL")
        
        if not parsed.hostname:
            issues.append("‚ùå Host no especificado en la URL")
        
        if not parsed.path or parsed.path == '/':
            issues.append("‚ùå Nombre de base de datos no especificado")
        
        if '@micrositio-vea-connect-server' not in parsed.username:
            issues.append("‚ö†Ô∏è  El nombre de usuario no incluye el sufijo del servidor")
        
        if 'sslmode=require' not in parsed.query:
            issues.append("‚ö†Ô∏è  SSL no est√° configurado como requerido")
        
        if issues:
            print("\nProblemas detectados:")
            for issue in issues:
                print(f"  {issue}")
            return False
        else:
            print("\n‚úÖ La URL de la base de datos parece estar bien formada")
            return True
            
    except Exception as e:
        print(f"‚ùå Error al analizar DATABASE_URL: {e}")
        return False

def test_direct_connection(variables):
    """Probar conexi√≥n directa a PostgreSQL."""
    print_section("PRUEBA DE CONEXI√ìN DIRECTA")
    
    db_host = variables['AZURE_POSTGRESQL_HOST']
    db_name = variables['AZURE_POSTGRESQL_NAME']
    db_user = variables['AZURE_POSTGRESQL_USERNAME']
    db_password = variables['AZURE_POSTGRESQL_PASSWORD']
    
    if not all([db_host, db_name, db_user, db_password]):
        print("‚ùå Faltan variables de entorno para la conexi√≥n directa")
        return False
    
    print(f"Host: {db_host}")
    print(f"Base de datos: {db_name}")
    print(f"Usuario: {db_user}")
    print(f"Contrase√±a: {'*' * len(db_password)}")
    
    try:
        # Intentar conexi√≥n directa
        connection_string = f"host={db_host} port=5432 dbname={db_name} user={db_user} password={db_password} sslmode=require"
        
        print("\nüîå Intentando conexi√≥n...")
        conn = psycopg2.connect(connection_string)
        
        # Verificar conexi√≥n
        cursor = conn.cursor()
        cursor.execute("SELECT version();")
        version = cursor.fetchone()
        
        print("‚úÖ Conexi√≥n exitosa!")
        print(f"Versi√≥n de PostgreSQL: {version[0]}")
        
        # Verificar base de datos actual
        cursor.execute("SELECT current_database();")
        current_db = cursor.fetchone()
        print(f"Base de datos actual: {current_db[0]}")
        
        # Verificar tablas de Django
        cursor.execute("""
            SELECT table_name 
            FROM information_schema.tables 
            WHERE table_schema = 'public' 
            AND table_name LIKE 'django_%'
            LIMIT 5;
        """)
        django_tables = cursor.fetchall()
        
        if django_tables:
            print(f"‚úÖ Tablas de Django encontradas: {len(django_tables)}")
            for table in django_tables:
                print(f"  - {table[0]}")
        else:
            print("‚ö†Ô∏è  No se encontraron tablas de Django")
        
        cursor.close()
        conn.close()
        return True
        
    except OperationalError as e:
        print(f"‚ùå Error de conexi√≥n: {e}")
        
        # Proporcionar sugerencias espec√≠ficas
        error_msg = str(e).lower()
        
        if "password authentication failed" in error_msg:
            print("\nüí° DIAGN√ìSTICO: Error de autenticaci√≥n de contrase√±a")
            print("   Posibles causas:")
            print("   1. La contrase√±a es incorrecta")
            print("   2. El nombre de usuario no incluye el sufijo del servidor")
            print("   3. El usuario no tiene permisos en la base de datos")
            print("   4. La contrase√±a contiene caracteres especiales que necesitan encoding")
            
            print("\nüîß SOLUCIONES:")
            print("   1. Verificar la contrase√±a en Azure Portal")
            print("   2. Asegurar que el usuario incluya '@micrositio-vea-connect-server'")
            print("   3. Resetear la contrase√±a del usuario en Azure PostgreSQL")
            print("   4. Verificar que el usuario tenga permisos en la base de datos")
            
        elif "connection refused" in error_msg:
            print("\nüí° DIAGN√ìSTICO: Conexi√≥n rechazada")
            print("   Posibles causas:")
            print("   1. El servidor PostgreSQL no est√° ejecut√°ndose")
            print("   2. El host o puerto son incorrectos")
            print("   3. Reglas de firewall bloquean la conexi√≥n")
            
        elif "ssl" in error_msg:
            print("\nüí° DIAGN√ìSTICO: Error de SSL")
            print("   Azure PostgreSQL requiere SSL")
            print("   Aseg√∫rate de que sslmode=require est√© configurado")
            
        return False
        
    except Exception as e:
        print(f"‚ùå Error inesperado: {e}")
        return False

def generate_correct_database_url(variables):
    """Generar una URL de base de datos correcta."""
    print_section("GENERACI√ìN DE DATABASE_URL CORRECTA")
    
    db_host = variables['AZURE_POSTGRESQL_HOST']
    db_name = variables['AZURE_POSTGRESQL_NAME']
    db_user = variables['AZURE_POSTGRESQL_USERNAME']
    db_password = variables['AZURE_POSTGRESQL_PASSWORD']
    
    if not all([db_host, db_name, db_user, db_password]):
        print("‚ùå No se pueden generar URLs sin todas las variables")
        return None
    
    # Asegurar que el usuario tenga el sufijo correcto
    if '@micrositio-vea-connect-server' not in db_user:
        db_user = f"{db_user}@micrositio-vea-connect-server"
        print(f"‚ö†Ô∏è  Agregando sufijo al usuario: {db_user}")
    
    # Codificar la contrase√±a para caracteres especiales
    encoded_password = urllib.parse.quote_plus(db_password)
    
    # Generar URL
    database_url = f"postgresql://{db_user}:{encoded_password}@{db_host}:5432/{db_name}?sslmode=require"
    
    print("‚úÖ URL generada correctamente:")
    print(f"   {database_url}")
    
    return database_url

def provide_fix_instructions():
    """Proporcionar instrucciones para corregir el problema."""
    print_section("INSTRUCCIONES DE CORRECCI√ìN")
    
    print("üîß Para corregir el problema de autenticaci√≥n:")
    print()
    print("1. **Verificar en Azure Portal:**")
    print("   - Ve a Azure Portal ‚Üí PostgreSQL Flexible Server")
    print("   - Verifica que el servidor est√© ejecut√°ndose")
    print("   - Ve a 'Connection security' y verifica las reglas de firewall")
    print()
    print("2. **Verificar credenciales:**")
    print("   - Ve a Azure Portal ‚Üí PostgreSQL Flexible Server ‚Üí Settings ‚Üí Connection strings")
    print("   - Copia las credenciales correctas")
    print("   - Aseg√∫rate de que el usuario incluya '@micrositio-vea-connect-server'")
    print()
    print("3. **Actualizar variables en Azure App Service:**")
    print("   - Ve a Azure Portal ‚Üí App Service ‚Üí Configuration")
    print("   - Actualiza las siguientes variables:")
    print("     * AZURE_POSTGRESQL_HOST")
    print("     * AZURE_POSTGRESQL_NAME")
    print("     * AZURE_POSTGRESQL_USERNAME (con @servidor)")
    print("     * AZURE_POSTGRESQL_PASSWORD")
    print("     * DATABASE_URL")
    print()
    print("4. **Resetear contrase√±a si es necesario:**")
    print("   - Ve a Azure Portal ‚Üí PostgreSQL Flexible Server ‚Üí Settings ‚Üí Reset password")
    print("   - Genera una nueva contrase√±a")
    print("   - Actualiza la variable AZURE_POSTGRESQL_PASSWORD")
    print()
    print("5. **Verificar permisos del usuario:**")
    print("   - Conecta a la base de datos usando Azure Data Studio o pgAdmin")
    print("   - Verifica que el usuario tenga permisos en la base de datos")

def main():
    """Funci√≥n principal."""
    print_header("DIAGN√ìSTICO DE CONEXI√ìN A BASE DE DATOS POSTGRESQL")
    
    # Verificar variables de entorno
    env_ok, variables = check_environment_variables()
    
    if not env_ok:
        print("\n‚ùå Faltan variables de entorno cr√≠ticas")
        provide_fix_instructions()
        return 1
    
    # Analizar DATABASE_URL
    database_url_ok = analyze_database_url(variables['DATABASE_URL'])
    
    # Probar conexi√≥n directa
    connection_ok = test_direct_connection(variables)
    
    # Generar URL correcta si es necesario
    if not database_url_ok:
        correct_url = generate_correct_database_url(variables)
        if correct_url:
            print(f"\nüìù URL corregida para usar en Azure App Service:")
            print(f"   DATABASE_URL={correct_url}")
    
    # Proporcionar instrucciones si hay problemas
    if not connection_ok:
        provide_fix_instructions()
        return 1
    
    print("\n‚úÖ Diagn√≥stico completado. La conexi√≥n a la base de datos est√° funcionando correctamente.")
    return 0

if __name__ == "__main__":
    sys.exit(main())
