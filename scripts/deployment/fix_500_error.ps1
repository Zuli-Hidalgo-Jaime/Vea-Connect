# Script para resolver el error 500 en producci√≥n
param(
    [string]$AppServiceName = "veaconnect-webapp-prod-c7aaezbce3ftacdp",
    [string]$ResourceGroup = "veaconnect-webapp-prod-rg"
)

Write-Host "üîß Resolviendo error 500 en Azure App Service" -ForegroundColor Green
Write-Host "================================================" -ForegroundColor Green

# Verificar si Azure CLI est√° instalado
if (-not (Get-Command az -ErrorAction SilentlyContinue)) {
    Write-Host "‚ùå Azure CLI no est√° instalado. Por favor inst√°lalo desde: https://docs.microsoft.com/en-us/cli/azure/install-azure-cli" -ForegroundColor Red
    exit 1
}

# Verificar si estamos logueados en Azure
try {
    $account = az account show 2>$null | ConvertFrom-Json
    if (-not $account) {
        Write-Host "‚ùå No est√°s logueado en Azure. Ejecuta: az login" -ForegroundColor Red
        exit 1
    }
    Write-Host "‚úÖ Logueado en Azure como: $($account.user.name)" -ForegroundColor Green
} catch {
    Write-Host "‚ùå Error al verificar cuenta de Azure" -ForegroundColor Red
    exit 1
}

# Funci√≥n para ejecutar comando en Azure App Service
function Invoke-AzureAppServiceCommand {
    param(
        [string]$Command,
        [string]$Description
    )
    
    Write-Host "üîÑ $Description..." -ForegroundColor Yellow
    try {
        $result = az webapp ssh --name $AppServiceName --resource-group $ResourceGroup --command $Command 2>&1
        if ($LASTEXITCODE -eq 0) {
            Write-Host "‚úÖ $Description completado" -ForegroundColor Green
            return $result
        } else {
            Write-Host "‚ùå Error en $Description" -ForegroundColor Red
            Write-Host $result -ForegroundColor Red
            return $null
        }
    } catch {
        Write-Host "‚ùå Error al ejecutar comando: $Command" -ForegroundColor Red
        return $null
    }
}

# Funci√≥n para verificar el estado del App Service
function Test-AppServiceStatus {
    Write-Host "üîç Verificando estado del App Service..." -ForegroundColor Yellow
    
    try {
        $status = az webapp show --name $AppServiceName --resource-group $ResourceGroup --query "state" -o tsv
        if ($status -eq "Running") {
            Write-Host "‚úÖ App Service est√° ejecut√°ndose" -ForegroundColor Green
            return $true
        } else {
            Write-Host "‚ùå App Service no est√° ejecut√°ndose. Estado: $status" -ForegroundColor Red
            return $false
        }
    } catch {
        Write-Host "‚ùå Error al verificar estado del App Service" -ForegroundColor Red
        return $false
    }
}

# Verificar estado del App Service
if (-not (Test-AppServiceStatus)) {
    Write-Host "‚ùå No se puede continuar. El App Service no est√° ejecut√°ndose." -ForegroundColor Red
    exit 1
}

Write-Host ""
Write-Host "üöÄ Iniciando proceso de correcci√≥n..." -ForegroundColor Green

# 1. Verificar conexi√≥n a la base de datos
Write-Host "üìä Verificando conexi√≥n a la base de datos..." -ForegroundColor Yellow
$dbCheck = Invoke-AzureAppServiceCommand "python manage.py shell -c \"from django.db import connection; cursor = connection.cursor(); cursor.execute('SELECT 1'); print('Database connection OK')\"" "Verificaci√≥n de base de datos"

# 2. Aplicar migraciones
Write-Host "üîÑ Aplicando migraciones..." -ForegroundColor Yellow
$migrations = Invoke-AzureAppServiceCommand "python manage.py migrate --verbosity=2" "Aplicaci√≥n de migraciones"

# 3. Recolectar archivos est√°ticos
Write-Host "üìÅ Recolectando archivos est√°ticos..." -ForegroundColor Yellow
$staticFiles = Invoke-AzureAppServiceCommand "python manage.py collectstatic --noinput" "Recolecci√≥n de archivos est√°ticos"

# 4. Verificar tabla CustomUser
Write-Host "üë• Verificando tabla CustomUser..." -ForegroundColor Yellow
$userTable = Invoke-AzureAppServiceCommand "python manage.py shell -c `"from apps.core.models import CustomUser; print(f'Users in DB: {CustomUser.objects.count()}')`"" "Verificaci√≥n de tabla CustomUser"

# 5. Crear superusuario si es necesario
Write-Host "üë§ Verificando superusuario..." -ForegroundColor Yellow
$superuser = Invoke-AzureAppServiceCommand "python manage.py shell -c `"from apps.core.models import CustomUser; print('Superusers:', CustomUser.objects.filter(is_superuser=True).count())`"" "Verificaci√≥n de superusuario"

# 6. Ejecutar script de diagn√≥stico completo
Write-Host "üîç Ejecutando diagn√≥stico completo..." -ForegroundColor Yellow
$diagnostic = Invoke-AzureAppServiceCommand "python scripts/deployment/fix_production_500.py" "Diagn√≥stico completo"

Write-Host ""
Write-Host "üèÅ Proceso completado" -ForegroundColor Green
Write-Host "================================================" -ForegroundColor Green

# Verificar el resultado
Write-Host "üîç Verificando que el error 500 se haya resuelto..." -ForegroundColor Yellow
try {
    $response = Invoke-WebRequest -Uri "https://$AppServiceName.azurewebsites.net/login/" -Method GET -TimeoutSec 10
    if ($response.StatusCode -eq 200) {
        Write-Host "‚úÖ El endpoint de login responde correctamente (c√≥digo 200)" -ForegroundColor Green
    } else {
        Write-Host "‚ö†Ô∏è  El endpoint responde con c√≥digo: $($response.StatusCode)" -ForegroundColor Yellow
    }
} catch {
    Write-Host "‚ùå Error al verificar el endpoint de login" -ForegroundColor Red
    Write-Host $_.Exception.Message -ForegroundColor Red
}

Write-Host ""
Write-Host "üí° Pr√≥ximos pasos:" -ForegroundColor Cyan
Write-Host "1. Verifica manualmente el endpoint de login" -ForegroundColor White
Write-Host "2. Revisa los logs de Azure si persiste el error" -ForegroundColor White
Write-Host "3. Ejecuta el script de diagn√≥stico si es necesario" -ForegroundColor White

Write-Host ""
Write-Host "üîó URL del App Service: https://$AppServiceName.azurewebsites.net/" -ForegroundColor Blue
Write-Host "üîó URL del login: https://$AppServiceName.azurewebsites.net/login/" -ForegroundColor Blue 