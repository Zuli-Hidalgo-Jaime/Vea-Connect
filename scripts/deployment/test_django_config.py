#!/usr/bin/env python3
"""
Script para probar la configuraci√≥n de Django en Azure App Service
"""

import os
import sys
import django

def test_django_config():
    """Prueba la configuraci√≥n de Django"""
    print("=== PRUEBA DE CONFIGURACI√ìN DJANGO ===")
    
    # Configurar variables de entorno
    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'config.settings.production')
    
    # Agregar el directorio actual al path para desarrollo local
    current_dir = os.path.dirname(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))
    sys.path.insert(0, current_dir)
    
    print(f"DJANGO_SETTINGS_MODULE: {os.environ.get('DJANGO_SETTINGS_MODULE')}")
    print(f"PYTHONPATH: {os.environ.get('PYTHONPATH')}")
    
    try:
        # Configurar Django
        django.setup()
        print("‚úÖ Django configurado correctamente")
        
        # Importar settings
        from django.conf import settings
        print(f"‚úÖ Settings importados: {settings.SETTINGS_MODULE}")
        
        # Verificar ALLOWED_HOSTS
        print(f"‚úÖ ALLOWED_HOSTS: {settings.ALLOWED_HOSTS}")
        
        # Verificar DEBUG
        print(f"‚úÖ DEBUG: {settings.DEBUG}")
        
        # Verificar DATABASES
        print(f"‚úÖ DATABASES configurado: {'default' in settings.DATABASES}")
        
        # Verificar INSTALLED_APPS
        print(f"‚úÖ INSTALLED_APPS: {len(settings.INSTALLED_APPS)} aplicaciones")
        
        # Verificar MIDDLEWARE
        print(f"‚úÖ MIDDLEWARE: {len(settings.MIDDLEWARE)} middlewares")
        
        # Verificar STATIC_ROOT
        print(f"‚úÖ STATIC_ROOT: {settings.STATIC_ROOT}")
        
        # Verificar CSRF_TRUSTED_ORIGINS
        print(f"‚úÖ CSRF_TRUSTED_ORIGINS: {getattr(settings, 'CSRF_TRUSTED_ORIGINS', 'No configurado')}")
        
        print("\nüéâ TODAS LAS PRUEBAS PASARON - Django est√° configurado correctamente")
        return True
        
    except Exception as e:
        print(f"‚ùå ERROR en la configuraci√≥n de Django: {e}")
        import traceback
        traceback.print_exc()
        return False

def test_wsgi_application():
    """Prueba la aplicaci√≥n WSGI"""
    print("\n=== PRUEBA DE APLICACI√ìN WSGI ===")
    
    try:
        # Importar la aplicaci√≥n WSGI
        from config.wsgi import application
        print("‚úÖ Aplicaci√≥n WSGI importada correctamente")
        
        # Verificar que es callable
        if callable(application):
            print("‚úÖ Aplicaci√≥n WSGI es callable")
        else:
            print("‚ùå Aplicaci√≥n WSGI no es callable")
            return False
            
        print("üéâ Aplicaci√≥n WSGI est√° configurada correctamente")
        return True
        
    except Exception as e:
        print(f"‚ùå ERROR en la aplicaci√≥n WSGI: {e}")
        import traceback
        traceback.print_exc()
        return False

def main():
    """Funci√≥n principal"""
    print("üîç PROBANDO CONFIGURACI√ìN DE DJANGO EN AZURE")
    print("=" * 60)
    
    # Probar configuraci√≥n de Django
    django_ok = test_django_config()
    
    # Probar aplicaci√≥n WSGI
    wsgi_ok = test_wsgi_application()
    
    print("\n" + "=" * 60)
    if django_ok and wsgi_ok:
        print("üéâ TODAS LAS PRUEBAS PASARON - Django est√° listo para funcionar")
        print("\nüìã PR√ìXIMOS PASOS:")
        print("1. El error 500 deber√≠a estar resuelto")
        print("2. Verifica los logs de Azure para confirmar")
        print("3. Accede a la aplicaci√≥n en el navegador")
    else:
        print("‚ùå HAY PROBLEMAS EN LA CONFIGURACI√ìN")
        print("\nüîß CORRECCIONES NECESARIAS:")
        print("- Verifica las variables de entorno")
        print("- Confirma que los archivos de configuraci√≥n existen")
        print("- Revisa los logs de Azure para m√°s detalles")

if __name__ == "__main__":
    main() 