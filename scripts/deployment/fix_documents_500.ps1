# Script para diagnosticar y corregir el error 500 espec√≠fico en el m√≥dulo de documentos
param(
    [string]$ResourceGroup = "vea-connect-rg",
    [string]$WebAppName = "vea-connect-g5dje9eba9bscnb6"
)

Write-Host "üîç DIAGN√ìSTICO ESPEC√çFICO DEL ERROR 500 EN DOCUMENTOS" -ForegroundColor Cyan
Write-Host "================================================================" -ForegroundColor Cyan

# Verificar si Azure CLI est√° instalado
try {
    $azVersion = az version --output json | ConvertFrom-Json
    Write-Host "‚úÖ Azure CLI detectado: $($azVersion.'azure-cli')" -ForegroundColor Green
} catch {
    Write-Host "‚ùå Azure CLI no est√° instalado. Por favor, inst√°lalo desde: https://docs.microsoft.com/en-us/cli/azure/install-azure-cli" -ForegroundColor Red
    exit 1
}

# Verificar si el usuario est√° logueado
try {
    $account = az account show --output json | ConvertFrom-Json
    Write-Host "‚úÖ Conectado como: $($account.user.name)" -ForegroundColor Green
} catch {
    Write-Host "‚ùå No est√°s logueado en Azure CLI. Ejecuta: az login" -ForegroundColor Red
    exit 1
}

# Funci√≥n para ejecutar comando en Azure App Service
function Invoke-AzureAppServiceCommand {
    param([string]$AppName, [string]$ResourceGroup, [string]$Command)
    
    try {
        $result = az webapp ssh --name $AppName --resource-group $ResourceGroup --command $Command --output json | ConvertFrom-Json
        return $result
    } catch {
        Write-Host "‚ùå Error ejecutando comando en Azure App Service: $_" -ForegroundColor Red
        return $null
    }
}

# Funci√≥n para obtener logs de la aplicaci√≥n
function Get-AzureAppServiceLogs {
    param([string]$AppName, [string]$ResourceGroup)
    
    Write-Host "üìã Obteniendo logs de la aplicaci√≥n..." -ForegroundColor Yellow
    
    try {
        $logs = az webapp log tail --name $AppName --resource-group $ResourceGroup --provider docker --output json | ConvertFrom-Json
        return $logs
    } catch {
        Write-Host "‚ùå Error obteniendo logs: $_" -ForegroundColor Red
        return $null
    }
}

# Funci√≥n para ejecutar diagn√≥stico de documentos
function Invoke-DocumentsDiagnostic {
    param([string]$AppName, [string]$ResourceGroup)
    
    Write-Host "üîç Ejecutando diagn√≥stico espec√≠fico de documentos..." -ForegroundColor Yellow
    
    $command = "cd /home/site/wwwroot && python scripts/diagnostics/diagnose_documents_error.py"
    
    try {
        $result = az webapp ssh --name $AppName --resource-group $ResourceGroup --command $command
        return $result
    } catch {
        Write-Host "‚ùå Error ejecutando diagn√≥stico: $_" -ForegroundColor Red
        return $null
    }
}

# Funci√≥n para aplicar migraciones
function Invoke-ApplyMigrations {
    param([string]$AppName, [string]$ResourceGroup)
    
    Write-Host "üîÑ Aplicando migraciones..." -ForegroundColor Yellow
    
    $command = "cd /home/site/wwwroot && python manage.py migrate --settings=config.settings.production"
    
    try {
        $result = az webapp ssh --name $AppName --resource-group $ResourceGroup --command $command
        Write-Host "‚úÖ Migraciones aplicadas exitosamente" -ForegroundColor Green
        return $true
    } catch {
        Write-Host "‚ùå Error aplicando migraciones: $_" -ForegroundColor Red
        return $false
    }
}

# Funci√≥n para verificar archivos de template
function Test-TemplateFiles {
    param([string]$AppName, [string]$ResourceGroup)
    
    Write-Host "üìÅ Verificando archivos de template..." -ForegroundColor Yellow
    
    $commands = @(
        "cd /home/site/wwwroot && find . -name 'documents.html'",
        "cd /home/site/wwwroot && find . -name 'documents' -type d",
        "cd /home/site/wwwroot && ls -la templates/",
        "cd /home/site/wwwroot && ls -la templates/documents/ 2>/dev/null || echo 'No existe templates/documents/'"
    )
    
    foreach ($cmd in $commands) {
        try {
            $result = az webapp ssh --name $AppName --resource-group $ResourceGroup --command $cmd
            Write-Host "   $result" -ForegroundColor Gray
        } catch {
            Write-Host "   ‚ùå Error: $_" -ForegroundColor Red
        }
    }
}

# Funci√≥n para verificar configuraci√≥n de archivos
function Test-FileConfiguration {
    param([string]$AppName, [string]$ResourceGroup)
    
    Write-Host "üìÅ Verificando configuraci√≥n de archivos..." -ForegroundColor Yellow
    
    $commands = @(
        "cd /home/site/wwwroot && ls -la media/ 2>/dev/null || echo 'No existe media/'",
        "cd /home/site/wwwroot && python -c \"import os; print('MEDIA_ROOT:', os.environ.get('MEDIA_ROOT', 'No configurado'))\"",
        "cd /home/site/wwwroot && python -c \"from django.conf import settings; print('DEFAULT_FILE_STORAGE:', getattr(settings, 'DEFAULT_FILE_STORAGE', 'No configurado'))\""
    )
    
    foreach ($cmd in $commands) {
        try {
            $result = az webapp ssh --name $AppName --resource-group $ResourceGroup --command $cmd
            Write-Host "   $result" -ForegroundColor Gray
        } catch {
            Write-Host "   ‚ùå Error: $_" -ForegroundColor Red
        }
    }
}

# Funci√≥n para reiniciar la aplicaci√≥n
function Restart-AzureAppService {
    param([string]$AppName, [string]$ResourceGroup)
    
    Write-Host "üîÑ Reiniciando aplicaci√≥n..." -ForegroundColor Yellow
    
    try {
        az webapp restart --name $AppName --resource-group $ResourceGroup
        Write-Host "‚úÖ Aplicaci√≥n reiniciada exitosamente" -ForegroundColor Green
        return $true
    } catch {
        Write-Host "‚ùå Error reiniciando aplicaci√≥n: $_" -ForegroundColor Red
        return $false
    }
}

# Funci√≥n para verificar variables de entorno espec√≠ficas
function Get-DocumentsEnvironmentVariables {
    param([string]$AppName, [string]$ResourceGroup)
    
    Write-Host "üìã Verificando variables de entorno espec√≠ficas..." -ForegroundColor Yellow
    
    try {
        $settings = az webapp config appsettings list --name $AppName --resource-group $ResourceGroup --output json | ConvertFrom-Json
        
        $documentsVars = @{}
        foreach ($setting in $settings) {
            if ($setting.name -like "*BLOB*" -or $setting.name -like "*AZURE*" -or $setting.name -like "*MEDIA*" -or $setting.name -like "*STORAGE*") {
                $documentsVars[$setting.name] = $setting.value
            }
        }
        
        Write-Host "üîß Variables relacionadas con documentos:" -ForegroundColor Cyan
        foreach ($key in $documentsVars.Keys) {
            if ($key -like "*KEY*" -or $key -like "*PASSWORD*") {
                Write-Host "  $key`: ********" -ForegroundColor Gray
            } else {
                Write-Host "  $key`: $($documentsVars[$key])" -ForegroundColor Gray
            }
        }
        
        return $documentsVars
    } catch {
        Write-Host "‚ùå Error obteniendo variables de entorno: $_" -ForegroundColor Red
        return $null
    }
}

# Funci√≥n para proporcionar soluciones espec√≠ficas
function Show-DocumentsSolutions {
    Write-Host "`nüîß SOLUCIONES ESPEC√çFICAS PARA ERROR 500 EN DOCUMENTOS" -ForegroundColor Cyan
    Write-Host "================================================================" -ForegroundColor Cyan
    
    Write-Host "`n1. **Problema con archivos de template:**" -ForegroundColor Yellow
    Write-Host "   - Verificar que documents.html existe en templates/"
    Write-Host "   - Verificar que el directorio templates/documents/ existe"
    Write-Host "   - Asegurar que los templates est√°n en el directorio correcto"
    
    Write-Host "`n2. **Problema con configuraci√≥n de archivos:**" -ForegroundColor Yellow
    Write-Host "   - Verificar que MEDIA_ROOT est√° configurado correctamente"
    Write-Host "   - Verificar que DEFAULT_FILE_STORAGE est√° configurado"
    Write-Host "   - Asegurar que el directorio media/ existe y tiene permisos"
    
    Write-Host "`n3. **Problema con Azure Blob Storage:**" -ForegroundColor Yellow
    Write-Host "   - Verificar variables BLOB_ACCOUNT_NAME, BLOB_ACCOUNT_KEY, BLOB_CONTAINER_NAME"
    Write-Host "   - Verificar variables AZURE_ACCOUNT_NAME, AZURE_ACCOUNT_KEY, AZURE_CONTAINER"
    Write-Host "   - Asegurar que el contenedor de Azure existe y es accesible"
    
    Write-Host "`n4. **Problema con base de datos:**" -ForegroundColor Yellow
    Write-Host "   - Ejecutar migraciones: python manage.py migrate"
    Write-Host "   - Verificar que la tabla documents_document existe"
    Write-Host "   - Verificar permisos de usuario en la base de datos"
    
    Write-Host "`n5. **Problema con autenticaci√≥n:**" -ForegroundColor Yellow
    Write-Host "   - Verificar que el usuario est√° autenticado"
    Write-Host "   - Verificar que el usuario tiene permisos para acceder a documentos"
    Write-Host "   - Verificar configuraci√≥n de LOGIN_URL y LOGIN_REDIRECT_URL"
    
    Write-Host "`n6. **Para debugging adicional:**" -ForegroundColor Yellow
    Write-Host "   - Habilitar DEBUG temporalmente en Azure App Service"
    Write-Host "   - Revisar logs de Django en Azure Portal"
    Write-Host "   - Verificar logs de la aplicaci√≥n en tiempo real"
}

# Ejecutar diagn√≥stico completo
Write-Host "`nüéØ INICIANDO DIAGN√ìSTICO COMPLETO" -ForegroundColor Cyan

# 1. Verificar variables de entorno
$envVars = Get-DocumentsEnvironmentVariables -AppName $WebAppName -ResourceGroup $ResourceGroup

# 2. Verificar archivos de template
Test-TemplateFiles -AppName $WebAppName -ResourceGroup $ResourceGroup

# 3. Verificar configuraci√≥n de archivos
Test-FileConfiguration -AppName $WebAppName -ResourceGroup $ResourceGroup

# 4. Ejecutar diagn√≥stico espec√≠fico de documentos
Write-Host "`nüîç EJECUTANDO DIAGN√ìSTICO ESPEC√çFICO..." -ForegroundColor Cyan
$diagnosticResult = Invoke-DocumentsDiagnostic -AppName $WebAppName -ResourceGroup $ResourceGroup

if ($diagnosticResult) {
    Write-Host "‚úÖ Diagn√≥stico ejecutado exitosamente" -ForegroundColor Green
    Write-Host "üìã Resultado del diagn√≥stico:" -ForegroundColor Yellow
    Write-Host $diagnosticResult -ForegroundColor Gray
} else {
    Write-Host "‚ùå Error ejecutando diagn√≥stico espec√≠fico" -ForegroundColor Red
}

# 5. Aplicar migraciones si es necesario
Write-Host "`nüîÑ APLICANDO MIGRACIONES..." -ForegroundColor Cyan
$migrationsOk = Invoke-ApplyMigrations -AppName $WebAppName -ResourceGroup $ResourceGroup

# 6. Reiniciar aplicaci√≥n
Write-Host "`nüîÑ REINICIANDO APLICACI√ìN..." -ForegroundColor Cyan
$restartOk = Restart-AzureAppService -AppName $WebAppName -ResourceGroup $ResourceGroup

# 7. Mostrar soluciones
Show-DocumentsSolutions

Write-Host "`nüéØ DIAGN√ìSTICO COMPLETADO" -ForegroundColor Cyan
Write-Host "================================================================" -ForegroundColor Cyan

Write-Host "`nüí° Pr√≥ximos pasos:" -ForegroundColor Yellow
Write-Host "1. Revisa los resultados del diagn√≥stico espec√≠fico" -ForegroundColor White
Write-Host "2. Aplica las soluciones recomendadas seg√∫n los problemas encontrados" -ForegroundColor White
Write-Host "3. Verifica que la secci√≥n de documentos funcione correctamente" -ForegroundColor White
Write-Host "4. Si persisten los problemas, revisa los logs de Azure App Service" -ForegroundColor White
