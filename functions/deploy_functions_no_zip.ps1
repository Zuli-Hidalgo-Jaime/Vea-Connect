# Script para desplegar Azure Functions sin compresi√≥n ZIP
# Esto evita problemas de dependencias faltantes

param(
    [string]$FunctionAppName = "vea-functions-apis",
    [string]$ResourceGroup = "vea-connect-rg",
    [string]$Location = "East US"
)

Write-Host "üöÄ Iniciando despliegue de Azure Functions sin compresi√≥n..." -ForegroundColor Green

# Verificar que estamos en el directorio correcto
if (-not (Test-Path "host.json")) {
    Write-Error "‚ùå No se encontr√≥ host.json. Ejecuta este script desde el directorio functions/"
    exit 1
}

# Limpiar archivos temporales
Write-Host "üßπ Limpiando archivos temporales..." -ForegroundColor Yellow
if (Test-Path "*.zip") {
    Remove-Item "*.zip" -Force
    Write-Host "‚úÖ Archivos ZIP eliminados" -ForegroundColor Green
}

# Verificar que las funciones est√°n presentes
$functions = @(
    "whatsapp_event_grid_trigger",
    "health",
    "create_embedding", 
    "search_similar",
    "get_stats",
    "embeddings_health_check"
)

foreach ($func in $functions) {
    if (-not (Test-Path $func)) {
        Write-Warning "‚ö†Ô∏è  Funci√≥n $func no encontrada"
    } else {
        Write-Host "‚úÖ Funci√≥n $func encontrada" -ForegroundColor Green
    }
}

# Verificar requirements.txt
if (Test-Path "requirements.txt") {
    Write-Host "‚úÖ requirements.txt encontrado" -ForegroundColor Green
    Write-Host "üìã Dependencias incluidas:" -ForegroundColor Cyan
    Get-Content "requirements.txt" | ForEach-Object { Write-Host "   $_" -ForegroundColor Gray }
} else {
    Write-Error "‚ùå requirements.txt no encontrado"
    exit 1
}

# Desplegar usando func azure functionapp publish sin compresi√≥n
Write-Host "üì§ Desplegando funciones a Azure..." -ForegroundColor Yellow
Write-Host "üîß Usando: func azure functionapp publish $FunctionAppName --build remote" -ForegroundColor Cyan

try {
    # Primero, intentar con build remote
    func azure functionapp publish $FunctionAppName --build remote
    
    if ($LASTEXITCODE -eq 0) {
        Write-Host "‚úÖ Despliegue exitoso con build remote" -ForegroundColor Green
    } else {
        Write-Warning "‚ö†Ô∏è  Build remote fall√≥, intentando con build local..."
        
        # Si falla, intentar con build local
        func azure functionapp publish $FunctionAppName --build local
        
        if ($LASTEXITCODE -eq 0) {
            Write-Host "‚úÖ Despliegue exitoso con build local" -ForegroundColor Green
        } else {
            Write-Error "‚ùå Despliegue fall√≥"
            exit 1
        }
    }
} catch {
    Write-Error "‚ùå Error durante el despliegue: $($_.Exception.Message)"
    exit 1
}

# Verificar el estado del despliegue
Write-Host "üîç Verificando estado del despliegue..." -ForegroundColor Yellow
Start-Sleep -Seconds 10

try {
    $status = az functionapp show --name $FunctionAppName --resource-group $ResourceGroup --query "state" -o tsv
    Write-Host "üìä Estado de la Function App: $status" -ForegroundColor Cyan
    
    if ($status -eq "Running") {
        Write-Host "‚úÖ Function App est√° ejecut√°ndose correctamente" -ForegroundColor Green
    } else {
        Write-Warning "‚ö†Ô∏è  Function App no est√° en estado Running: $status"
    }
} catch {
    Write-Warning "‚ö†Ô∏è  No se pudo verificar el estado de la Function App"
}

# Mostrar URLs de las funciones
Write-Host "üåê URLs de las funciones:" -ForegroundColor Cyan
$baseUrl = "https://$FunctionAppName.azurewebsites.net/api"

foreach ($func in $functions) {
    if (Test-Path $func) {
        Write-Host "   $func: $baseUrl/$func" -ForegroundColor Gray
    }
}

Write-Host "üéâ Despliegue completado!" -ForegroundColor Green
Write-Host "üìù Para ver logs: az webapp log tail --name $FunctionAppName --resource-group $ResourceGroup" -ForegroundColor Cyan
