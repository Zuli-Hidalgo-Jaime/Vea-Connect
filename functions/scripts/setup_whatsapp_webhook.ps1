#!/usr/bin/env pwsh
<#
.SYNOPSIS
    Script para configurar el webhook de WhatsApp con Event Grid

.DESCRIPTION
    Este script automatiza la configuraci√≥n del webhook de WhatsApp,
    incluyendo la configuraci√≥n de variables de entorno y la creaci√≥n
    de la suscripci√≥n de Event Grid.

.PARAMETER FunctionAppName
    Nombre de la aplicaci√≥n de funciones de Azure

.PARAMETER ResourceGroup
    Nombre del grupo de recursos

.PARAMETER CommunicationServiceName
    Nombre del servicio de comunicaci√≥n de Azure

.PARAMETER SubscriptionId
    ID de la suscripci√≥n de Azure

.PARAMETER Environment
    Entorno de despliegue (dev, staging, prod)

.EXAMPLE
    .\setup_whatsapp_webhook.ps1 -FunctionAppName "vea-connect-functions" -ResourceGroup "vea-connect-rg" -CommunicationServiceName "acs-veu-connect-00" -SubscriptionId "9f47ecda-6fbc-479d-888a-a5966f0c9c50" -Environment "prod"
#>

param(
    [Parameter(Mandatory=$true)]
    [string]$FunctionAppName,
    
    [Parameter(Mandatory=$true)]
    [string]$ResourceGroup,
    
    [Parameter(Mandatory=$true)]
    [string]$CommunicationServiceName,
    
    [Parameter(Mandatory=$true)]
    [string]$SubscriptionId,
    
    [Parameter(Mandatory=$false)]
    [ValidateSet("dev", "staging", "prod")]
    [string]$Environment = "dev"
)

# Configurar colores para output
$Host.UI.RawUI.ForegroundColor = "White"

Write-Host "üöÄ CONFIGURACI√ìN DEL WEBHOOK DE WHATSAPP" -ForegroundColor Cyan
Write-Host "===============================================" -ForegroundColor Cyan
Write-Host ""

# Verificar que Azure CLI est√© instalado y conectado
Write-Host "üîç Verificando Azure CLI..." -ForegroundColor Yellow
try {
    $account = az account show --query "user.name" -o tsv 2>$null
    if ($LASTEXITCODE -ne 0) {
        Write-Host "‚ùå No est√°s conectado a Azure. Ejecuta 'az login' primero." -ForegroundColor Red
        exit 1
    }
    Write-Host "‚úÖ Conectado como: $account" -ForegroundColor Green
} catch {
    Write-Host "‚ùå Error verificando Azure CLI: $_" -ForegroundColor Red
    exit 1
}

# Verificar que la Function App existe
Write-Host "üîç Verificando Function App..." -ForegroundColor Yellow
try {
    $functionApp = az functionapp show --name $FunctionAppName --resource-group $ResourceGroup --query "name" -o tsv 2>$null
    if ($LASTEXITCODE -ne 0) {
        Write-Host "‚ùå Function App '$FunctionAppName' no encontrada en el grupo de recursos '$ResourceGroup'" -ForegroundColor Red
        exit 1
    }
    Write-Host "‚úÖ Function App encontrada: $functionApp" -ForegroundColor Green
} catch {
    Write-Host "‚ùå Error verificando Function App: $_" -ForegroundColor Red
    exit 1
}

# Verificar que el Communication Service existe
Write-Host "üîç Verificando Communication Service..." -ForegroundColor Yellow
try {
    $commService = az communication show --name $CommunicationServiceName --resource-group $ResourceGroup --query "name" -o tsv 2>$null
    if ($LASTEXITCODE -ne 0) {
        Write-Host "‚ùå Communication Service '$CommunicationServiceName' no encontrado en el grupo de recursos '$ResourceGroup'" -ForegroundColor Red
        exit 1
    }
    Write-Host "‚úÖ Communication Service encontrado: $commService" -ForegroundColor Green
} catch {
    Write-Host "‚ùå Error verificando Communication Service: $_" -ForegroundColor Red
    exit 1
}

# Configurar variables de entorno seg√∫n el entorno
Write-Host "üîß Configurando variables de entorno para entorno: $Environment" -ForegroundColor Yellow

$envVars = @{}

# Variables base para todos los entornos
$envVars["FUNCTIONS_WORKER_RUNTIME"] = "python"
$envVars["AZURE_OPENAI_CHAT_DEPLOYMENT"] = "gpt-35-turbo"
$envVars["AZURE_OPENAI_CHAT_API_VERSION"] = "2024-02-15-preview"
$envVars["AZURE_OPENAI_EMBEDDINGS_DEPLOYMENT"] = "text-embedding-ada-002"
$envVars["AZURE_OPENAI_EMBEDDINGS_API_VERSION"] = "2023-05-15"
$envVars["REDIS_TTL_SECS"] = "3600"

# Configuraci√≥n espec√≠fica por entorno
switch ($Environment) {
    "dev" {
        $envVars["WHATSAPP_DEBUG"] = "true"
        $envVars["E2E_DEBUG"] = "true"
        $envVars["RAG_ENABLED"] = "false"
        $envVars["BOT_SYSTEM_PROMPT"] = "Eres un asistente virtual de VEA Connect en modo desarrollo. Responde de manera amigable y profesional en espa√±ol. MODO DEBUG ACTIVO."
    }
    "staging" {
        $envVars["WHATSAPP_DEBUG"] = "false"
        $envVars["E2E_DEBUG"] = "true"
        $envVars["RAG_ENABLED"] = "true"
        $envVars["BOT_SYSTEM_PROMPT"] = "Eres un asistente virtual de VEA Connect en modo staging. Responde de manera amigable y profesional en espa√±ol."
    }
    "prod" {
        $envVars["WHATSAPP_DEBUG"] = "false"
        $envVars["E2E_DEBUG"] = "false"
        $envVars["RAG_ENABLED"] = "true"
        $envVars["BOT_SYSTEM_PROMPT"] = "Eres un asistente virtual de VEA Connect, una plataforma de gesti√≥n para organizaciones sin fines de lucro. Tu funci√≥n es ayudar a los usuarios con informaci√≥n sobre donaciones, eventos, documentos y servicios de la organizaci√≥n. Responde de manera amigable y profesional en espa√±ol. Mant√©n las respuestas concisas pero informativas. Si no tienes informaci√≥n espec√≠fica sobre algo, sugiere contactar al equipo de VEA Connect."
    }
}

# Solicitar variables sensibles al usuario
Write-Host "üìù Configuraci√≥n de variables sensibles:" -ForegroundColor Yellow
Write-Host ""

$envVars["AZURE_OPENAI_ENDPOINT"] = Read-Host "Azure OpenAI Endpoint (ej: https://openai-veaconnect.openai.azure.com/)"
$envVars["AZURE_OPENAI_API_KEY"] = Read-Host "Azure OpenAI API Key" -AsSecureString | ConvertFrom-SecureString -AsPlainText
$envVars["ACS_WHATSAPP_ENDPOINT"] = Read-Host "ACS WhatsApp Endpoint (ej: https://acs-veu-connect-00.unitedstates.communication.azure.com/)"
$envVars["ACS_WHATSAPP_API_KEY"] = Read-Host "ACS WhatsApp API Key" -AsSecureString | ConvertFrom-SecureString -AsPlainText
$envVars["ACS_PHONE_NUMBER"] = Read-Host "ACS Phone Number (ej: +5215574908943)"
$envVars["WHATSAPP_CHANNEL_ID_GUID"] = Read-Host "WhatsApp Channel ID GUID"

# Variables opcionales
Write-Host ""
Write-Host "üìù Variables opcionales (presiona Enter para usar valores por defecto):" -ForegroundColor Yellow

$searchEndpoint = Read-Host "Azure Search Endpoint (opcional)"
if ($searchEndpoint) {
    $envVars["AZURE_SEARCH_ENDPOINT"] = $searchEndpoint
    $envVars["AZURE_SEARCH_API_KEY"] = Read-Host "Azure Search API Key" -AsSecureString | ConvertFrom-SecureString -AsPlainText
    $envVars["AZURE_SEARCH_INDEX_NAME"] = Read-Host "Azure Search Index Name"
}

# Aplicar configuraci√≥n
Write-Host ""
Write-Host "üîß Aplicando configuraci√≥n a la Function App..." -ForegroundColor Yellow

try {
    # Construir comando de configuraci√≥n
    $settingsArgs = @()
    foreach ($key in $envVars.Keys) {
        $value = $envVars[$key]
        $settingsArgs += "$key=`"$value`""
    }
    
    $settingsString = $settingsArgs -join " "
    $command = "az functionapp config appsettings set --name $FunctionAppName --resource-group $ResourceGroup --settings $settingsString"
    
    Write-Host "Ejecutando: $command" -ForegroundColor Gray
    
    # Ejecutar comando
    Invoke-Expression $command
    
    if ($LASTEXITCODE -eq 0) {
        Write-Host "‚úÖ Variables de entorno configuradas correctamente" -ForegroundColor Green
    } else {
        Write-Host "‚ùå Error configurando variables de entorno" -ForegroundColor Red
        exit 1
    }
} catch {
    Write-Host "‚ùå Error aplicando configuraci√≥n: $_" -ForegroundColor Red
    exit 1
}

# Crear suscripci√≥n de Event Grid
Write-Host ""
Write-Host "üîó Creando suscripci√≥n de Event Grid..." -ForegroundColor Yellow

try {
    $sourceResourceId = "/subscriptions/$SubscriptionId/resourceGroups/$ResourceGroup/providers/Microsoft.Communication/communicationServices/$CommunicationServiceName"
    $endpointResourceId = "/subscriptions/$SubscriptionId/resourceGroups/$ResourceGroup/providers/Microsoft.Web/sites/$FunctionAppName/functions/whatsapp_event_grid_trigger"
    
    $eventGridCommand = "az eventgrid event-subscription create --source-resource-id `"$sourceResourceId`" --name `"whatsapp-webhook-$Environment`" --endpoint-type `"azurefunction`" --endpoint `"$endpointResourceId`" --included-event-types `"Microsoft.Communication.AdvancedMessageReceived`""
    
    Write-Host "Ejecutando: $eventGridCommand" -ForegroundColor Gray
    
    Invoke-Expression $eventGridCommand
    
    if ($LASTEXITCODE -eq 0) {
        Write-Host "‚úÖ Suscripci√≥n de Event Grid creada correctamente" -ForegroundColor Green
    } else {
        Write-Host "‚ùå Error creando suscripci√≥n de Event Grid" -ForegroundColor Red
        Write-Host "Puede que ya exista una suscripci√≥n con el mismo nombre" -ForegroundColor Yellow
    }
} catch {
    Write-Host "‚ùå Error creando suscripci√≥n de Event Grid: $_" -ForegroundColor Red
}

# Verificar configuraci√≥n
Write-Host ""
Write-Host "üîç Verificando configuraci√≥n..." -ForegroundColor Yellow

try {
    $currentSettings = az functionapp config appsettings list --name $FunctionAppName --resource-group $ResourceGroup --query "[?name=='AZURE_OPENAI_ENDPOINT'].value" -o tsv 2>$null
    
    if ($currentSettings) {
        Write-Host "‚úÖ Configuraci√≥n verificada correctamente" -ForegroundColor Green
    } else {
        Write-Host "‚ö†Ô∏è No se pudo verificar la configuraci√≥n" -ForegroundColor Yellow
    }
} catch {
    Write-Host "‚ö†Ô∏è Error verificando configuraci√≥n: $_" -ForegroundColor Yellow
}

# Mostrar resumen
Write-Host ""
Write-Host "üìã RESUMEN DE CONFIGURACI√ìN" -ForegroundColor Cyan
Write-Host "============================" -ForegroundColor Cyan
Write-Host "Function App: $FunctionAppName" -ForegroundColor White
Write-Host "Grupo de Recursos: $ResourceGroup" -ForegroundColor White
Write-Host "Communication Service: $CommunicationServiceName" -ForegroundColor White
Write-Host "Entorno: $Environment" -ForegroundColor White
Write-Host "Suscripci√≥n Event Grid: whatsapp-webhook-$Environment" -ForegroundColor White
Write-Host ""

Write-Host "üéâ Configuraci√≥n completada exitosamente!" -ForegroundColor Green
Write-Host ""
Write-Host "üìù Pr√≥ximos pasos:" -ForegroundColor Yellow
Write-Host "1. Desplegar la funci√≥n: func azure functionapp publish $FunctionAppName" -ForegroundColor White
Write-Host "2. Probar el webhook: python test_whatsapp_webhook.py" -ForegroundColor White
Write-Host "3. Verificar logs: az webapp log tail --name $FunctionAppName --resource-group $ResourceGroup" -ForegroundColor White
Write-Host ""

Write-Host "üìö Documentaci√≥n: functions/docs/WHATSAPP_WEBHOOK_GUIDE.md" -ForegroundColor Cyan
